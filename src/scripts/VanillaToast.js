var TypeToast;
(function (TypeToast) {
    TypeToast[TypeToast["INFO"] = 0] = "INFO";
    TypeToast[TypeToast["WARNING"] = 1] = "WARNING";
    TypeToast[TypeToast["ERROR"] = 2] = "ERROR";
})(TypeToast || (TypeToast = {}));
var VanillaToast = (function () {
    function VanillaToast(parent) {
        this.REMOVE_TIME_MS = 10000000;
        this.parent = parent;
        this.duration = this.REMOVE_TIME_MS;
    }
    VanillaToast.prototype.showSuccess = function (title, message) {
        var text = this.getCustomToast(title, message, "success");
        var toast = this.addToast(text);
    };
    VanillaToast.prototype.showInfo = function (title, message) {
        var text = this.getCustomToast(title, message, "info");
        var toast = this.addToast(text);
    };
    VanillaToast.prototype.showWarning = function (title, message) {
        var text = this.getCustomToast(title, message, "warning");
        var toast = this.addToast(text);
    };
    VanillaToast.prototype.showError = function (title, message) {
        var text = this.getCustomToast(title, message, "error");
        var toast = this.addToast(text);
    };
    VanillaToast.prototype.showPlain = function (title, message) {
        var text = this.getCustomToast(title, message, "plain");
        var toast = this.addToast(text);
    };
    VanillaToast.prototype.showCustom = function (title, message, iconUrl) {
        var text = this.getCustomToast(title, message, "error");
        var toast = this.addToast(text);
        return toast;
    };
    VanillaToast.prototype.getCustomToast = function (title, message, type) {
        if (!title)
            title = " ";
        if (!message)
            message = " ";
        var toast = document.createElement("div");
        toast.className = "dj-toast";
        toast.style.display = "none";
        toast.insertAdjacentHTML("afterbegin", '<div class="dj-toast-icon-' + type + '"></div>' +
            '<div class="dj-toast-text">' +
            '<div class="dj-toast-title">' + title + '</div>' +
            '<div class="dj-toast-message">' + message + '</div></div>');
        toast.fade = function (type, ms, onEnd) {
            var self = toast;
            var isIn = type === 'in', opacity = isIn ? 0 : 1, interval = 10, duration = ms, gap = interval / duration;
            if (isIn) {
                self.style.display = 'block';
                self.style.opacity = opacity;
            }
            function func() {
                opacity = isIn ? opacity + gap : opacity - gap;
                self.style.opacity = opacity;
                if (opacity <= 0)
                    self.style.display = 'none';
                if (opacity <= 0 || opacity >= 1) {
                    window.clearInterval(fading);
                    if (onEnd != null)
                        onEnd();
                }
            }
            var fading = window.setInterval(func, interval);
        };
        toast.fadeIn = function (ms, onEnd) {
            toast.fade("in", ms, onEnd);
        };
        toast.fadeOut = function (ms, onEnd) {
            toast.fade("out", ms, onEnd);
        };
        return toast;
    };
    VanillaToast.prototype.addToast = function (toast) {
        var self = this;
        var container = this.getContainer();
        container.appendChild(toast);
        var closeBtn = document.createElement("div");
        closeBtn.className = "dj-toast-icon-close";
        toast.appendChild(closeBtn);
        closeBtn.addEventListener("pointerdown", function () {
            self.removeToast(toast);
        });
        setTimeout(function () {
            self.removeToast(toast);
        }, self.duration);
        toast.fadeIn(VanillaToast.FADE_MS);
        return toast;
    };
    VanillaToast.prototype.getContainer = function () {
        if (this.parent.getElementsByClassName("dj-toast-container").length == 0) {
            this.parent.insertAdjacentHTML("afterbegin", "<div class=\"dj-toast-container\"></div>");
        }
        return this.parent.getElementsByClassName("dj-toast-container")[0];
    };
    VanillaToast.prototype.removeToast = function (toast) {
        toast.fadeOut(VanillaToast.FADE_MS, function () {
            toast.remove();
        });
    };
    VanillaToast.FADE_MS = 400;
    return VanillaToast;
}());

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNjcmlwdHMvVmFuaWxsYVRvYXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLElBQUssU0FJSjtBQUpELFdBQUssU0FBUztJQUNaLHlDQUFJLENBQUE7SUFDSiwrQ0FBTyxDQUFBO0lBQ1AsMkNBQUssQ0FBQTtBQUNQLENBQUMsRUFKSSxTQUFTLEtBQVQsU0FBUyxRQUliO0FBRUQ7SUFRRSxzQkFBWSxNQUFXO1FBTGYsbUJBQWMsR0FBRyxRQUFRLENBQUM7UUFNaEMsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7UUFDckIsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDO0lBQ3RDLENBQUM7SUFFTSxrQ0FBVyxHQUFsQixVQUFtQixLQUFhLEVBQUUsT0FBZTtRQUMvQyxJQUFJLElBQUksR0FBZ0IsSUFBSSxDQUFDLGNBQWMsQ0FBQyxLQUFLLEVBQUUsT0FBTyxFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBQ3ZFLElBQUksS0FBSyxHQUFnQixJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQy9DLENBQUM7SUFFTSwrQkFBUSxHQUFmLFVBQWdCLEtBQWEsRUFBRSxPQUFlO1FBQzVDLElBQUksSUFBSSxHQUFnQixJQUFJLENBQUMsY0FBYyxDQUFDLEtBQUssRUFBRSxPQUFPLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDcEUsSUFBSSxLQUFLLEdBQWdCLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDL0MsQ0FBQztJQUVNLGtDQUFXLEdBQWxCLFVBQW1CLEtBQWEsRUFBRSxPQUFlO1FBQy9DLElBQUksSUFBSSxHQUFnQixJQUFJLENBQUMsY0FBYyxDQUFDLEtBQUssRUFBRSxPQUFPLEVBQUUsU0FBUyxDQUFDLENBQUM7UUFDdkUsSUFBSSxLQUFLLEdBQWdCLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDL0MsQ0FBQztJQUVNLGdDQUFTLEdBQWhCLFVBQWlCLEtB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QUFLLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUVuQyxNQUFNLENBQUMsS0FBSyxDQUFDO0lBQ2YsQ0FBQztJQUVPLG1DQUFZLEdBQXBCO1FBRUUsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxzQkFBc0IsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDLE1BQU0sSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBRXpFLElBQUksQ0FBQyxNQUFNLENBQUMsa0JBQWtCLENBQUMsWUFBWSxFQUFFLDBDQUEwQyxDQUFDLENBQUM7UUFDM0YsQ0FBQztRQUVELE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLHNCQUFzQixDQUFDLG9CQUFvQixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDckUsQ0FBQztJQUVPLGtDQUFXLEdBQW5CLFVBQW9CLEtBQVU7UUFFNUIsS0FBSyxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsT0FBTyxFQUFFO1lBQ2hDLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUNqQixDQUFDLENBQ0YsQ0FBQztJQUNKLENBQUM7SUExSWMsb0JBQU8sR0FBRyxHQUFHLENBQUM7SUEySS9CLG1CQUFDO0NBN0lELEFBNklDLElBQUEiLCJmaWxlIjoic2NyaXB0cy9WYW5pbGxhVG9hc3QuanMiLCJzb3VyY2VzQ29udGVudCI6WyJlbnVtIFR5cGVUb2FzdCB7XG4gIElORk8sXG4gIFdBUk5JTkcsXG4gIEVSUk9SXG59XG5cbmNsYXNzIFZhbmlsbGFUb2FzdCB7XG5cbiAgcHJpdmF0ZSBzdGF0aWMgRkFERV9NUyA9IDQwMDtcbiAgcHJpdmF0ZSBSRU1PVkVfVElNRV9NUyA9IDEwMDAwMDAwO1xuXG4gIHByaXZhdGUgcGFyZW50OiBhbnk7XG4gIHByaXZhdGUgZHVyYXRpb247XG5cbiAgY29uc3RydWN0b3IocGFyZW50OiBhbnkpIHtcbiAgICB0aGlzLnBhcmVudCA9IHBhcmVudDtcbiAgICB0aGlzLmR1cmF0aW9uID0gdGhpcy5SRU1PVkVfVElNRV9NUztcbiAgfVxuXG4gIHB1YmxpYyBzaG93U3VjY2Vzcyh0aXRsZTogc3RyaW5nLCBtZXNzYWdlOiBzdHJpbmcpIHtcbiAgICBsZXQgdGV4dDogSFRNTEVsZW1lbnQgPSB0aGlzLmdldEN1c3RvbVRvYXN0KHRpdGxlLCBtZXNzYWdlLCBcInN1Y2Nlc3NcIik7XG4gICAgbGV0IHRvYXN0OiBIVE1MRWxlbWVudCA9IHRoaXMuYWRkVG9hc3QodGV4dCk7XG4gIH1cblxuICBwdWJsaWMgc2hvd0luZm8odGl0bGU6IHN0cmluZywgbWVzc2FnZTogc3RyaW5nKSB7XG4gICAgbGV0IHRleHQ6IEhUTUxFbGVtZW50ID0gdGhpcy5nZXRDdXN0b21Ub2FzdCh0aXRsZSwgbWVzc2FnZSwgXCJpbmZvXCIpO1xuICAgIGxldCB0b2FzdDogSFRNTEVsZW1lbnQgPSB0aGlzLmFkZFRvYXN0KHRleHQpO1xuICB9XG5cbiAgcHVibGljIHNob3dXYXJuaW5nKHRpdGxlOiBzdHJpbmcsIG1lc3NhZ2U6IHN0cmluZykge1xuICAgIGxldCB0ZXh0OiBIVE1MRWxlbWVudCA9IHRoaXMuZ2V0Q3VzdG9tVG9hc3QodGl0bGUsIG1lc3NhZ2UsIFwid2FybmluZ1wiKTtcbiAgICBsZXQgdG9hc3Q6IEhUTUxFbGVtZW50ID0gdGhpcy5hZGRUb2FzdCh0ZXh0KTtcbiAgfVxuXG4gIHB1YmxpYyBzaG93RXJyb3IodGl0bGU6IHN0cmluZywgbWVzc2FnZTogc3RyaW5nKSB7XG4gICAgbGV0IHRleHQ6IEhUTUxFbGVtZW50ID0gdGhpcy5nZXRDdXN0b21Ub2FzdCh0aXRsZSwgbWVzc2FnZSwgXCJlcnJvclwiKTtcbiAgICBsZXQgdG9hc3Q6IEhUTUxFbGVtZW50ID0gdGhpcy5hZGRUb2FzdCh0ZXh0KTtcbiAgfVxuXG4gIHB1YmxpYyBzaG93UGxhaW4odGl0bGU6IHN0cmluZywgbWVzc2FnZTogc3RyaW5nKTogSFRNTEVsZW1lbnQge1xuICAgIGxldCB0ZXh0OiBIVE1MRWxlbWVudCA9IHRoaXMuZ2V0Q3VzdG9tVG9hc3QodGl0bGUsIG1lc3NhZ2UsIFwicGxhaW5cIik7XG4gICAgbGV0IHRvYXN0OiBIVE1MRWxlbWVudCA9IHRoaXMuYWRkVG9hc3QodGV4dCk7XG4gIH1cblxuICBwdWJsaWMgc2hvd0N1c3RvbSh0aXRsZTogc3RyaW5nLCBtZXNzYWdlOiBzdHJpbmcsIGljb25Vcmw6IHN0cmluZyk6IEhUTUxFbGVtZW50IHtcbiAgICAvLyBUT0RPOiBBZGRcbiAgICBsZXQgdGV4dDogSFRNTEVsZW1lbnQgPSB0aGlzLmdldEN1c3RvbVRvYXN0KHRpdGxlLCBtZXNzYWdlLCBcImVycm9yXCIpO1xuICAgIGxldCB0b2FzdDogSFRNTEVsZW1lbnQgPSB0aGlzLmFkZFRvYXN0KHRleHQpO1xuICAgIHJldHVybiB0b2FzdDtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0Q3VzdG9tVG9hc3QodGl0bGU6IHN0cmluZywgbWVzc2FnZTogc3RyaW5nLCB0eXBlOiBzdHJpbmcpOiBIVE1MRWxlbWVudCB7XG5cbiAgICBpZiAoIXRpdGxlKSB0aXRsZSA9IFwiIFwiO1xuICAgIGlmICghbWVzc2FnZSkgbWVzc2FnZSA9IFwiIFwiO1xuXG4gICAgbGV0IHRvYXN0OiBhbnkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIHRvYXN0LmNsYXNzTmFtZSA9IFwiZGotdG9hc3RcIjtcbiAgICB0b2FzdC5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG4gICAgdG9hc3QuaW5zZXJ0QWRqYWNlbnRIVE1MKFwiYWZ0ZXJiZWdpblwiLFxuICAgICAgJzxkaXYgY2xhc3M9XCJkai10b2FzdC1pY29uLScgKyB0eXBlICsgJ1wiPjwvZGl2PicgK1xuICAgICAgJzxkaXYgY2xhc3M9XCJkai10b2FzdC10ZXh0XCI+JyArXG4gICAgICAnPGRpdiBjbGFzcz1cImRqLXRvYXN0LXRpdGxlXCI+JyArIHRpdGxlICsgJzwvZGl2PicgK1xuICAgICAgJzxkaXYgY2xhc3M9XCJkai10b2FzdC1tZXNzYWdlXCI+JyArIG1lc3NhZ2UgKyAnPC9kaXY+PC9kaXY+J1xuICAgICk7XG5cbiAgICB0b2FzdC5mYWRlID0gKHR5cGU6IHN0cmluZywgbXM6IG51bWJlciwgb25FbmQ/OiAoKSA9PiB2b2lkKSA9PiB7XG4gICAgICBsZXQgc2VsZjphbnkgPSB0b2FzdDtcblxuICAgICAgbGV0IGlzSW4gPSB0eXBlID09PSAnaW4nLFxuICAgICAgICBvcGFjaXR5ID0gaXNJbiA/IDAgOiAxLFxuICAgICAgICBpbnRlcnZhbCA9IDEwLFxuICAgICAgICBkdXJhdGlvbiA9IG1zLFxuICAgICAgICBnYXAgPSBpbnRlcnZhbCAvIGR1cmF0aW9uO1xuXG4gICAgICBpZihpc0luKSB7XG4gICAgICAgIHNlbGYuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XG4gICAgICAgIHNlbGYuc3R5bGUub3BhY2l0eSA9IG9wYWNpdHk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGZ1bmMoKSB7XG4gICAgICAgIG9wYWNpdHkgPSBpc0luID8gb3BhY2l0eSArIGdhcCA6IG9wYWNpdHkgLSBnYXA7XG4gICAgICAgIHNlbGYuc3R5bGUub3BhY2l0eSA9IG9wYWNpdHk7XG5cbiAgICAgICAgaWYob3BhY2l0eSA8PSAwKSBzZWxmLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSdcbiAgICAgICAgaWYob3BhY2l0eSA8PSAwIHx8IG9wYWNpdHkgPj0gMSkge1xuICAgICAgICAgIHdpbmRvdy5jbGVhckludGVydmFsKGZhZGluZyk7XG4gICAgICAgICAgaWYgKG9uRW5kICE9IG51bGwpIG9uRW5kKCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbGV0IGZhZGluZyA9IHdpbmRvdy5zZXRJbnRlcnZhbChmdW5jLCBpbnRlcnZhbCk7XG4gICAgfTtcblxuICAgIHRvYXN0LmZhZGVJbiA9IChtczogbnVtYmVyLCBvbkVuZD86ICgpID0+IHZvaWQpID0+IHtcbiAgICAgIHRvYXN0LmZhZGUoXCJpblwiLCBtcywgb25FbmQpO1xuICAgIH07XG5cbiAgICB0b2FzdC5mYWRlT3V0ID0gKG1zOiBudW1iZXIsIG9uRW5kPzogKCkgPT4gdm9pZCkgPT4ge1xuICAgICAgdG9hc3QuZmFkZShcIm91dFwiLCBtcywgb25FbmQpO1xuICAgIH07XG5cbiAgICByZXR1cm4gdG9hc3Q7XG4gIH1cblxuICBwcml2YXRlIGFkZFRvYXN0KHRvYXN0OiBhbnkpOiBIVE1MRWxlbWVudCB7XG5cbiAgICBsZXQgc2VsZiA9IHRoaXM7XG5cbiAgICBsZXQgY29udGFpbmVyOiBhbnkgPSB0aGlzLmdldENvbnRhaW5lcigpO1xuICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZCh0b2FzdCk7XG5cbiAgICAvLyBBZGQgY2xvc2UgYnV0dG9uXG4gICAgbGV0IGNsb3NlQnRuOiBIVE1MRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgY2xvc2VCdG4uY2xhc3NOYW1lID0gXCJkai10b2FzdC1pY29uLWNsb3NlXCI7XG4gICAgdG9hc3QuYXBwZW5kQ2hpbGQoY2xvc2VCdG4pO1xuXG4gICAgY2xvc2VCdG4uYWRkRXZlbnRMaXN0ZW5lcihcInBvaW50ZXJkb3duXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHNlbGYucmVtb3ZlVG9hc3QodG9hc3QpO1xuICAgIH0pO1xuXG4gICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICBzZWxmLnJlbW92ZVRvYXN0KHRvYXN0KVxuICAgIH0sIHNlbGYuZHVyYXRpb24pO1xuXG4gICAgdG9hc3QuZmFkZUluKFZhbmlsbGFUb2FzdC5GQURFX01TKTsgLy8gVE9ETzogQ3VzdG9taXplIHRpbWUgb3V0XG5cbiAgICByZXR1cm4gdG9hc3Q7XG4gIH1cblxuICBwcml2YXRlIGdldENvbnRhaW5lcigpOiBhbnkge1xuXG4gICAgaWYgKHRoaXMucGFyZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoXCJkai10b2FzdC1jb250YWluZXJcIikubGVuZ3RoID09IDApIHtcbiAgICAgIC8vIENvbnRhaW5lciBkb2Vzbid0IGV4aXN0XG4gICAgICB0aGlzLnBhcmVudC5pbnNlcnRBZGphY2VudEhUTUwoXCJhZnRlcmJlZ2luXCIsIFwiPGRpdiBjbGFzcz1cXFwiZGotdG9hc3QtY29udGFpbmVyXFxcIj48L2Rpdj5cIik7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMucGFyZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoXCJkai10b2FzdC1jb250YWluZXJcIilbMF07XG4gIH1cblxuICBwcml2YXRlIHJlbW92ZVRvYXN0KHRvYXN0OiBhbnkpIHtcblxuICAgIHRvYXN0LmZhZGVPdXQoVmFuaWxsYVRvYXN0LkZBREVfTVMsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdG9hc3QucmVtb3ZlKCk7XG4gICAgICB9XG4gICAgKTtcbiAgfVxufVxuIl19
