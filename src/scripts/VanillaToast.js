var TypeToast;
(function (TypeToast) {
    TypeToast["SUCCESS"] = "success";
    TypeToast["INFO"] = "info";
    TypeToast["WARNING"] = "warning";
    TypeToast["ERROR"] = "error";
    TypeToast["PLAIN"] = "plain";
    TypeToast["CUSTOM"] = "custom";
})(TypeToast || (TypeToast = {}));
var VanillaToast = (function () {
    function VanillaToast(parent) {
        this.REMOVE_TIME_MS = 10000000;
        this.parent = parent;
        this.duration = this.REMOVE_TIME_MS;
    }
    VanillaToast.prototype.showSuccess = function (title, message) {
        var text = this.getCustomToast(title, message, TypeToast.SUCCESS);
        var toast = this.addToast(text);
        return toast;
    };
    VanillaToast.prototype.showInfo = function (title, message) {
        var text = this.getCustomToast(title, message, TypeToast.INFO);
        var toast = this.addToast(text);
        return toast;
    };
    VanillaToast.prototype.showWarning = function (title, message) {
        var text = this.getCustomToast(title, message, TypeToast.WARNING);
        var toast = this.addToast(text);
        return toast;
    };
    VanillaToast.prototype.showError = function (title, message) {
        var text = this.getCustomToast(title, message, TypeToast.ERROR);
        var toast = this.addToast(text);
        return toast;
    };
    VanillaToast.prototype.showPlain = function (title, message) {
        var text = this.getCustomToast(title, message, TypeToast.PLAIN);
        var toast = this.addToast(text);
        return toast;
    };
    VanillaToast.prototype.showCustom = function (title, message, iconUrl) {
        var text = this.getCustomToast(title, message, TypeToast.CUSTOM, iconUrl);
        var toast = this.addToast(text);
        return toast;
    };
    VanillaToast.prototype.getCustomToast = function (title, message, type, iconUrl) {
        if (!title)
            title = " ";
        if (!message)
            message = " ";
        var icon = '<div class="dj-toast-icon"></div>';
        if (type == TypeToast.CUSTOM) {
            icon = '<div class="dj-toast-icon" style="background-image: url(' + iconUrl + ');"></div>';
        }
        var toast = document.createElement("div");
        toast.className = "dj-toast dj-toast-" + type;
        toast.style.display = "none";
        toast.insertAdjacentHTML("afterbegin", icon +
            '<div class="dj-toast-text">' +
            '<div class="dj-toast-title">' + title + '</div>' +
            '<div class="dj-toast-message">' + message + '</div></div>');
        toast.fade = function (type, ms, onEnd) {
            var self = toast;
            var isIn = type === 'in', opacity = isIn ? 0 : 1, interval = 10, duration = ms, gap = interval / duration;
            if (isIn) {
                self.style.display = 'block';
                self.style.opacity = opacity;
            }
            function func() {
                opacity = isIn ? opacity + gap : opacity - gap;
                self.style.opacity = opacity;
                if (opacity <= 0)
                    self.style.display = 'none';
                if (opacity <= 0 || opacity >= 1) {
                    window.clearInterval(fading);
                    if (onEnd != null)
                        onEnd();
                }
            }
            var fading = window.setInterval(func, interval);
        };
        toast.fadeIn = function (ms, onEnd) {
            toast.fade("in", ms, onEnd);
        };
        toast.fadeOut = function (ms, onEnd) {
            toast.fade("out", ms, onEnd);
        };
        return toast;
    };
    VanillaToast.prototype.addToast = function (toast) {
        var self = this;
        var container = this.getContainer();
        container.appendChild(toast);
        var closeBtn = document.createElement("div");
        closeBtn.className = "dj-toast-icon-close";
        toast.appendChild(closeBtn);
        closeBtn.addEventListener("pointerdown", function () {
            self.removeToast(toast);
        });
        setTimeout(function () {
            self.removeToast(toast);
        }, self.duration);
        toast.fadeIn(VanillaToast.FADE_MS);
        return toast;
    };
    VanillaToast.prototype.getContainer = function () {
        if (this.parent.getElementsByClassName("dj-toast-container").length == 0) {
            this.parent.insertAdjacentHTML("afterbegin", "<div class=\"dj-toast-container\"></div>");
        }
        return this.parent.getElementsByClassName("dj-toast-container")[0];
    };
    VanillaToast.prototype.removeToast = function (toast) {
        toast.fadeOut(VanillaToast.FADE_MS, function () {
            toast.remove();
        });
    };
    VanillaToast.FADE_MS = 400;
    return VanillaToast;
}());

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNjcmlwdHMvVmFuaWxsYVRvYXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLElBQUssU0FPSjtBQVBELFdBQUssU0FBUztJQUNaLGdDQUFtQixDQUFBO0lBQ25CLDBCQUFhLENBQUE7SUFDYixnQ0FBbUIsQ0FBQTtJQUNuQiw0QkFBZSxDQUFBO0lBQ2YsNEJBQWUsQ0FBQTtJQUNmLDhCQUFpQixDQUFBO0FBQ25CLENBQUMsRUFQSSxTQUFTLEtBQVQsU0FBUyxRQU9iO0FBRUQ7SUFRRSxzQkFBWSxNQUFXO1FBTGYsbUJBQWMsR0FBRyxRQUFRLENBQUM7UUFNaEMsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7UUFDckIsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDO0lBQ3RDLENBQUM7SUFFTSxrQ0FBVyxHQUFsQixVQUFtQixLQUFhLEVBQUUsT0FBZTtRQUMvQyxJQUFJLElBQUksR0FBZ0IsSUFBSSxDQUFDLGNBQWMsQ0FBQyxLQUFLLEVBQUUsT0FBTyxFQUFFLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUMvRSxJQUFJLEtBQUssR0FBZ0IsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUM3QyxNQUFNLENBQUMsS0FBSyxDQUFDO0lBQ2YsQ0FBQztJQUVNLCtCQUFRLEdBQWYsVUFBZ0IsS0FBYSxFQUFFLE9BQWU7UUFDNUMsSUFBSSxJQUFJLEdBQWdCLElBQUksQ0FBQyxjQUFjLENBQUMsS0FBSyxFQUFFLE9BQU8sRUFBRSxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDNUUsSUFBSSxLQUFLLEdBQWdCLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDN0MsTUFBTSxDQUFDLEtBQUssQ0FBQztJQUNmLENBQUM7SUFFTSxrQ0FBVyxHQUFsQixVQUFtQixLQUFhLEVBQUUsT0FBZTtRQUMvQyxJQUFJLElBQUksR0FBZ0IsSUFBSSxDQUFDLGNBQWMsQ0FBQyxLQUFL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QW5KYyxvQkFBTyxHQUFHLEdBQUcsQ0FBQztJQW9KL0IsbUJBQUM7Q0F0SkQsQUFzSkMsSUFBQSIsImZpbGUiOiJzY3JpcHRzL1ZhbmlsbGFUb2FzdC5qcyIsInNvdXJjZXNDb250ZW50IjpbImVudW0gVHlwZVRvYXN0IHtcbiAgU1VDQ0VTUyA9IFwic3VjY2Vzc1wiLFxuICBJTkZPID0gXCJpbmZvXCIsXG4gIFdBUk5JTkcgPSBcIndhcm5pbmdcIixcbiAgRVJST1IgPSBcImVycm9yXCIsXG4gIFBMQUlOID0gXCJwbGFpblwiLFxuICBDVVNUT00gPSBcImN1c3RvbVwiXG59XG5cbmNsYXNzIFZhbmlsbGFUb2FzdCB7XG5cbiAgcHJpdmF0ZSBzdGF0aWMgRkFERV9NUyA9IDQwMDtcbiAgcHJpdmF0ZSBSRU1PVkVfVElNRV9NUyA9IDEwMDAwMDAwO1xuXG4gIHByaXZhdGUgcGFyZW50OiBhbnk7XG4gIHByaXZhdGUgZHVyYXRpb247XG5cbiAgY29uc3RydWN0b3IocGFyZW50OiBhbnkpIHtcbiAgICB0aGlzLnBhcmVudCA9IHBhcmVudDtcbiAgICB0aGlzLmR1cmF0aW9uID0gdGhpcy5SRU1PVkVfVElNRV9NUztcbiAgfVxuXG4gIHB1YmxpYyBzaG93U3VjY2Vzcyh0aXRsZTogc3RyaW5nLCBtZXNzYWdlOiBzdHJpbmcpOiBIVE1MRWxlbWVudCB7XG4gICAgbGV0IHRleHQ6IEhUTUxFbGVtZW50ID0gdGhpcy5nZXRDdXN0b21Ub2FzdCh0aXRsZSwgbWVzc2FnZSwgVHlwZVRvYXN0LlNVQ0NFU1MpO1xuICAgIGxldCB0b2FzdDogSFRNTEVsZW1lbnQgPSB0aGlzLmFkZFRvYXN0KHRleHQpO1xuICAgIHJldHVybiB0b2FzdDtcbiAgfVxuXG4gIHB1YmxpYyBzaG93SW5mbyh0aXRsZTogc3RyaW5nLCBtZXNzYWdlOiBzdHJpbmcpOiBIVE1MRWxlbWVudCB7XG4gICAgbGV0IHRleHQ6IEhUTUxFbGVtZW50ID0gdGhpcy5nZXRDdXN0b21Ub2FzdCh0aXRsZSwgbWVzc2FnZSwgVHlwZVRvYXN0LklORk8pO1xuICAgIGxldCB0b2FzdDogSFRNTEVsZW1lbnQgPSB0aGlzLmFkZFRvYXN0KHRleHQpO1xuICAgIHJldHVybiB0b2FzdDtcbiAgfVxuXG4gIHB1YmxpYyBzaG93V2FybmluZyh0aXRsZTogc3RyaW5nLCBtZXNzYWdlOiBzdHJpbmcpOiBIVE1MRWxlbWVudCB7XG4gICAgbGV0IHRleHQ6IEhUTUxFbGVtZW50ID0gdGhpcy5nZXRDdXN0b21Ub2FzdCh0aXRsZSwgbWVzc2FnZSwgVHlwZVRvYXN0LldBUk5JTkcpO1xuICAgIGxldCB0b2FzdDogSFRNTEVsZW1lbnQgPSB0aGlzLmFkZFRvYXN0KHRleHQpO1xuICAgIHJldHVybiB0b2FzdDtcbiAgfVxuXG4gIHB1YmxpYyBzaG93RXJyb3IodGl0bGU6IHN0cmluZywgbWVzc2FnZTogc3RyaW5nKTogSFRNTEVsZW1lbnQge1xuICAgIGxldCB0ZXh0OiBIVE1MRWxlbWVudCA9IHRoaXMuZ2V0Q3VzdG9tVG9hc3QodGl0bGUsIG1lc3NhZ2UsIFR5cGVUb2FzdC5FUlJPUik7XG4gICAgbGV0IHRvYXN0OiBIVE1MRWxlbWVudCA9IHRoaXMuYWRkVG9hc3QodGV4dCk7XG4gICAgcmV0dXJuIHRvYXN0O1xuICB9XG5cbiAgcHVibGljIHNob3dQbGFpbih0aXRsZTogc3RyaW5nLCBtZXNzYWdlOiBzdHJpbmcpOiBIVE1MRWxlbWVudCB7XG4gICAgbGV0IHRleHQ6IEhUTUxFbGVtZW50ID0gdGhpcy5nZXRDdXN0b21Ub2FzdCh0aXRsZSwgbWVzc2FnZSwgVHlwZVRvYXN0LlBMQUlOKTtcbiAgICBsZXQgdG9hc3Q6IEhUTUxFbGVtZW50ID0gdGhpcy5hZGRUb2FzdCh0ZXh0KTtcbiAgICByZXR1cm4gdG9hc3Q7XG4gIH1cblxuICBwdWJsaWMgc2hvd0N1c3RvbSh0aXRsZTogc3RyaW5nLCBtZXNzYWdlOiBzdHJpbmcsIGljb25Vcmw6IHN0cmluZyk6IEhUTUxFbGVtZW50IHtcbiAgICBsZXQgdGV4dDogSFRNTEVsZW1lbnQgPSB0aGlzLmdldEN1c3RvbVRvYXN0KHRpdGxlLCBtZXNzYWdlLCBUeXBlVG9hc3QuQ1VTVE9NLCBpY29uVXJsKTtcbiAgICBsZXQgdG9hc3Q6IEhUTUxFbGVtZW50ID0gdGhpcy5hZGRUb2FzdCh0ZXh0KTtcbiAgICByZXR1cm4gdG9hc3Q7XG4gIH1cblxuICBwcml2YXRlIGdldEN1c3RvbVRvYXN0KHRpdGxlOiBzdHJpbmcsIG1lc3NhZ2U6IHN0cmluZywgdHlwZTogVHlwZVRvYXN0LCBpY29uVXJsPzogc3RyaW5nKTogSFRNTEVsZW1lbnQge1xuXG4gICAgaWYgKCF0aXRsZSkgdGl0bGUgPSBcIiBcIjtcbiAgICBpZiAoIW1lc3NhZ2UpIG1lc3NhZ2UgPSBcIiBcIjtcblxuICAgIGxldCBpY29uID0gJzxkaXYgY2xhc3M9XCJkai10b2FzdC1pY29uXCI+PC9kaXY+JztcbiAgICBpZiAodHlwZSA9PSBUeXBlVG9hc3QuQ1VTVE9NKSB7XG4gICAgICBpY29uID0gJzxkaXYgY2xhc3M9XCJkai10b2FzdC1pY29uXCIgc3R5bGU9XCJiYWNrZ3JvdW5kLWltYWdlOiB1cmwoJyArIGljb25VcmwgKyAnKTtcIj48L2Rpdj4nO1xuICAgIH1cblxuICAgIGxldCB0b2FzdDogYW55ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICB0b2FzdC5jbGFzc05hbWUgPSBcImRqLXRvYXN0IGRqLXRvYXN0LVwiICsgdHlwZTtcbiAgICB0b2FzdC5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG4gICAgdG9hc3QuaW5zZXJ0QWRqYWNlbnRIVE1MKFwiYWZ0ZXJiZWdpblwiLFxuICAgICAgaWNvbiArXG4gICAgICAnPGRpdiBjbGFzcz1cImRqLXRvYXN0LXRleHRcIj4nICtcbiAgICAgICc8ZGl2IGNsYXNzPVwiZGotdG9hc3QtdGl0bGVcIj4nICsgdGl0bGUgKyAnPC9kaXY+JyArXG4gICAgICAnPGRpdiBjbGFzcz1cImRqLXRvYXN0LW1lc3NhZ2VcIj4nICsgbWVzc2FnZSArICc8L2Rpdj48L2Rpdj4nXG4gICAgKTtcblxuICAgIHRvYXN0LmZhZGUgPSAodHlwZTogc3RyaW5nLCBtczogbnVtYmVyLCBvbkVuZD86ICgpID0+IHZvaWQpID0+IHtcbiAgICAgIGxldCBzZWxmOmFueSA9IHRvYXN0O1xuXG4gICAgICBsZXQgaXNJbiA9IHR5cGUgPT09ICdpbicsXG4gICAgICAgIG9wYWNpdHkgPSBpc0luID8gMCA6IDEsXG4gICAgICAgIGludGVydmFsID0gMTAsXG4gICAgICAgIGR1cmF0aW9uID0gbXMsXG4gICAgICAgIGdhcCA9IGludGVydmFsIC8gZHVyYXRpb247XG5cbiAgICAgIGlmKGlzSW4pIHtcbiAgICAgICAgc2VsZi5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcbiAgICAgICAgc2VsZi5zdHlsZS5vcGFjaXR5ID0gb3BhY2l0eTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gZnVuYygpIHtcbiAgICAgICAgb3BhY2l0eSA9IGlzSW4gPyBvcGFjaXR5ICsgZ2FwIDogb3BhY2l0eSAtIGdhcDtcbiAgICAgICAgc2VsZi5zdHlsZS5vcGFjaXR5ID0gb3BhY2l0eTtcblxuICAgICAgICBpZihvcGFjaXR5IDw9IDApIHNlbGYuc3R5bGUuZGlzcGxheSA9ICdub25lJ1xuICAgICAgICBpZihvcGFjaXR5IDw9IDAgfHwgb3BhY2l0eSA+PSAxKSB7XG4gICAgICAgICAgd2luZG93LmNsZWFySW50ZXJ2YWwoZmFkaW5nKTtcbiAgICAgICAgICBpZiAob25FbmQgIT0gbnVsbCkgb25FbmQoKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBsZXQgZmFkaW5nID0gd2luZG93LnNldEludGVydmFsKGZ1bmMsIGludGVydmFsKTtcbiAgICB9O1xuXG4gICAgdG9hc3QuZmFkZUluID0gKG1zOiBudW1iZXIsIG9uRW5kPzogKCkgPT4gdm9pZCkgPT4ge1xuICAgICAgdG9hc3QuZmFkZShcImluXCIsIG1zLCBvbkVuZCk7XG4gICAgfTtcblxuICAgIHRvYXN0LmZhZGVPdXQgPSAobXM6IG51bWJlciwgb25FbmQ/OiAoKSA9PiB2b2lkKSA9PiB7XG4gICAgICB0b2FzdC5mYWRlKFwib3V0XCIsIG1zLCBvbkVuZCk7XG4gICAgfTtcblxuICAgIHJldHVybiB0b2FzdDtcbiAgfVxuXG4gIHByaXZhdGUgYWRkVG9hc3QodG9hc3Q6IGFueSk6IEhUTUxFbGVtZW50IHtcblxuICAgIGxldCBzZWxmID0gdGhpcztcblxuICAgIGxldCBjb250YWluZXI6IGFueSA9IHRoaXMuZ2V0Q29udGFpbmVyKCk7XG4gICAgY29udGFpbmVyLmFwcGVuZENoaWxkKHRvYXN0KTtcblxuICAgIC8vIEFkZCBjbG9zZSBidXR0b25cbiAgICBsZXQgY2xvc2VCdG46IEhUTUxFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICBjbG9zZUJ0bi5jbGFzc05hbWUgPSBcImRqLXRvYXN0LWljb24tY2xvc2VcIjtcbiAgICB0b2FzdC5hcHBlbmRDaGlsZChjbG9zZUJ0bik7XG5cbiAgICBjbG9zZUJ0bi5hZGRFdmVudExpc3RlbmVyKFwicG9pbnRlcmRvd25cIiwgZnVuY3Rpb24gKCkge1xuICAgICAgc2VsZi5yZW1vdmVUb2FzdCh0b2FzdCk7XG4gICAgfSk7XG5cbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIHNlbGYucmVtb3ZlVG9hc3QodG9hc3QpXG4gICAgfSwgc2VsZi5kdXJhdGlvbik7XG5cbiAgICB0b2FzdC5mYWRlSW4oVmFuaWxsYVRvYXN0LkZBREVfTVMpOyAvLyBUT0RPOiBDdXN0b21pemUgdGltZSBvdXRcblxuICAgIHJldHVybiB0b2FzdDtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0Q29udGFpbmVyKCk6IGFueSB7XG5cbiAgICBpZiAodGhpcy5wYXJlbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShcImRqLXRvYXN0LWNvbnRhaW5lclwiKS5sZW5ndGggPT0gMCkge1xuICAgICAgLy8gQ29udGFpbmVyIGRvZXNuJ3QgZXhpc3RcbiAgICAgIHRoaXMucGFyZW50Lmluc2VydEFkamFjZW50SFRNTChcImFmdGVyYmVnaW5cIiwgXCI8ZGl2IGNsYXNzPVxcXCJkai10b2FzdC1jb250YWluZXJcXFwiPjwvZGl2PlwiKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5wYXJlbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShcImRqLXRvYXN0LWNvbnRhaW5lclwiKVswXTtcbiAgfVxuXG4gIHByaXZhdGUgcmVtb3ZlVG9hc3QodG9hc3Q6IGFueSkge1xuXG4gICAgdG9hc3QuZmFkZU91dChWYW5pbGxhVG9hc3QuRkFERV9NUywgZnVuY3Rpb24gKCkge1xuICAgICAgICB0b2FzdC5yZW1vdmUoKTtcbiAgICAgIH1cbiAgICApO1xuICB9XG59XG4iXX0=
